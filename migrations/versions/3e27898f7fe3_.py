"""empty message

Revision ID: 3e27898f7fe3
Revises: 
Create Date: 2020-09-25 14:46:42.019022

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3e27898f7fe3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('film_category')
    op.drop_index('film_fulltext_idx', table_name='film')
    op.drop_index('idx_fk_language_id', table_name='film')
    op.drop_index('idx_title', table_name='film')
    op.drop_table('film')
    op.drop_index('idx_fk_inventory_id', table_name='rental')
    op.drop_index('idx_unq_rental_rental_date_inventory_id_customer_id', table_name='rental')
    op.drop_table('rental')
    op.drop_index('idx_fk_city_id', table_name='address')
    op.drop_table('address')
    op.drop_table('staff')
    op.drop_index('idx_store_id_film_id', table_name='inventory')
    op.drop_table('inventory')
    op.drop_table('language')
    op.drop_table('category')
    op.drop_index('idx_actor_last_name', table_name='actor')
    op.drop_table('actor')
    op.drop_index('idx_fk_film_id', table_name='film_actor')
    op.drop_table('film_actor')
    op.drop_index('idx_fk_address_id', table_name='customer')
    op.drop_index('idx_fk_store_id', table_name='customer')
    op.drop_index('idx_last_name', table_name='customer')
    op.drop_table('customer')
    op.drop_index('idx_fk_customer_id', table_name='payment')
    op.drop_index('idx_fk_rental_id', table_name='payment')
    op.drop_index('idx_fk_staff_id', table_name='payment')
    op.drop_table('payment')
    op.drop_index('idx_unq_manager_staff_id', table_name='store')
    op.drop_table('store')
    op.drop_index('idx_fk_country_id', table_name='city')
    op.drop_table('city')
    op.add_column('country', sa.Column('fehca', sa.String(), nullable=True))
    op.add_column('country', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('country', sa.Column('pais', sa.String(), nullable=True))
    op.drop_column('country', 'last_update')
    op.drop_column('country', 'country')
    op.drop_column('country', 'country_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('country', sa.Column('country_id', sa.INTEGER(), server_default=sa.text("nextval('country_country_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.add_column('country', sa.Column('country', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('country', sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_column('country', 'pais')
    op.drop_column('country', 'id')
    op.drop_column('country', 'fehca')
    op.create_table('city',
    sa.Column('city_id', sa.INTEGER(), server_default=sa.text("nextval('city_city_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('city', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('country_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['country.country_id'], name='fk_city'),
    sa.PrimaryKeyConstraint('city_id', name='city_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_fk_country_id', 'city', ['country_id'], unique=False)
    op.create_table('store',
    sa.Column('store_id', sa.INTEGER(), server_default=sa.text("nextval('store_store_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('manager_staff_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('address_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['address.address_id'], name='store_address_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['manager_staff_id'], ['staff.staff_id'], name='store_manager_staff_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('store_id', name='store_pkey')
    )
    op.create_index('idx_unq_manager_staff_id', 'store', ['manager_staff_id'], unique=True)
    op.create_table('payment',
    sa.Column('payment_id', sa.INTEGER(), server_default=sa.text("nextval('payment_payment_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('customer_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('staff_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('rental_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.customer_id'], name='payment_customer_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['rental_id'], ['rental.rental_id'], name='payment_rental_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['staff_id'], ['staff.staff_id'], name='payment_staff_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('payment_id', name='payment_pkey')
    )
    op.create_index('idx_fk_staff_id', 'payment', ['staff_id'], unique=False)
    op.create_index('idx_fk_rental_id', 'payment', ['rental_id'], unique=False)
    op.create_index('idx_fk_customer_id', 'payment', ['customer_id'], unique=False)
    op.create_table('customer',
    sa.Column('customer_id', sa.INTEGER(), server_default=sa.text("nextval('customer_customer_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('store_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('address_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('activebool', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('create_date', sa.DATE(), server_default=sa.text("('now'::text)::date"), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('active', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['address.address_id'], name='customer_address_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('customer_id', name='customer_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_last_name', 'customer', ['last_name'], unique=False)
    op.create_index('idx_fk_store_id', 'customer', ['store_id'], unique=False)
    op.create_index('idx_fk_address_id', 'customer', ['address_id'], unique=False)
    op.create_table('film_actor',
    sa.Column('actor_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('film_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['actor.actor_id'], name='film_actor_actor_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['film_id'], ['film.film_id'], name='film_actor_film_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('actor_id', 'film_id', name='film_actor_pkey')
    )
    op.create_index('idx_fk_film_id', 'film_actor', ['film_id'], unique=False)
    op.create_table('actor',
    sa.Column('actor_id', sa.INTEGER(), server_default=sa.text("nextval('actor_actor_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('actor_id', name='actor_pkey')
    )
    op.create_index('idx_actor_last_name', 'actor', ['last_name'], unique=False)
    op.create_table('category',
    sa.Column('category_id', sa.INTEGER(), server_default=sa.text("nextval('category_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('category_id', name='category_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('language',
    sa.Column('language_id', sa.INTEGER(), server_default=sa.text("nextval('language_language_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.CHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('language_id', name='language_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('inventory',
    sa.Column('inventory_id', sa.INTEGER(), server_default=sa.text("nextval('inventory_inventory_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('film_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('store_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['film_id'], ['film.film_id'], name='inventory_film_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('inventory_id', name='inventory_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_store_id_film_id', 'inventory', ['store_id', 'film_id'], unique=False)
    op.create_table('staff',
    sa.Column('staff_id', sa.INTEGER(), server_default=sa.text("nextval('staff_staff_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('address_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('store_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=40), autoincrement=False, nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('picture', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['address.address_id'], name='staff_address_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('staff_id', name='staff_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('address',
    sa.Column('address_id', sa.INTEGER(), server_default=sa.text("nextval('address_address_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('address', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('address2', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('district', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('city_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['city_id'], ['city.city_id'], name='fk_address_city'),
    sa.PrimaryKeyConstraint('address_id', name='address_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_fk_city_id', 'address', ['city_id'], unique=False)
    op.create_table('rental',
    sa.Column('rental_id', sa.INTEGER(), server_default=sa.text("nextval('rental_rental_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('rental_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('inventory_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('return_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('staff_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.customer_id'], name='rental_customer_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['inventory_id'], ['inventory.inventory_id'], name='rental_inventory_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['staff_id'], ['staff.staff_id'], name='rental_staff_id_key'),
    sa.PrimaryKeyConstraint('rental_id', name='rental_pkey')
    )
    op.create_index('idx_unq_rental_rental_date_inventory_id_customer_id', 'rental', ['rental_date', 'inventory_id', 'customer_id'], unique=True)
    op.create_index('idx_fk_inventory_id', 'rental', ['inventory_id'], unique=False)
    op.create_table('film',
    sa.Column('film_id', sa.INTEGER(), server_default=sa.text("nextval('film_film_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('release_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('language_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('rental_duration', sa.SMALLINT(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('rental_rate', sa.NUMERIC(precision=4, scale=2), server_default=sa.text('4.99'), autoincrement=False, nullable=False),
    sa.Column('length', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('replacement_cost', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('19.99'), autoincrement=False, nullable=False),
    sa.Column('rating', postgresql.ENUM('G', 'PG', 'PG-13', 'R', 'NC-17', name='mpaa_rating'), server_default=sa.text("'G'::mpaa_rating"), autoincrement=False, nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('fulltext', postgresql.TSVECTOR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['language_id'], ['language.language_id'], name='film_language_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('film_id', name='film_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_title', 'film', ['title'], unique=False)
    op.create_index('idx_fk_language_id', 'film', ['language_id'], unique=False)
    op.create_index('film_fulltext_idx', 'film', ['fulltext'], unique=False)
    op.create_table('film_category',
    sa.Column('film_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['category.category_id'], name='film_category_category_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['film_id'], ['film.film_id'], name='film_category_film_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('film_id', 'category_id', name='film_category_pkey')
    )
    # ### end Alembic commands ###
